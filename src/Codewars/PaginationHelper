import java.util.List;

//TODO: complete this object/class

public class PaginationHelper<I> {
	private int itemsPerPage;
	private int totalItems;

	/**
	 * The constructor takes in an array of items and a integer indicating how many
	 * items fit within a single page
	 */
	public PaginationHelper(List<I> collection, int itemsPerPage) {
		super();
		this.itemsPerPage = itemsPerPage;
		this.totalItems = collection.size();
	}

	public int getItemsPerPage() {
		return itemsPerPage;
	}

	public void setItemsPerPage(int itemsPerPage) {
		this.itemsPerPage = itemsPerPage;
	}

	public int getTotalItems() {
		return totalItems;
	}

	public void setTotalItems(int totalPages) {
		this.totalItems = totalPages;
	}

	/**
	 * returns the number of items within the entire collection
	 */
	public int itemCount() {
		return getTotalItems();

	}

	/**
	 * returns the number of pages
	 */
	public int pageCount() {
		int counter = getTotalItems() / getItemsPerPage();
		if (getTotalItems() % getItemsPerPage() != 0) {
			counter += 1;
		}
		return counter;
		
	}

	/**
	 * returns the number of items on the current page. page_index is zero based.
	 * this method should return -1 for pageIndex values that are out of range
	 */
	public int pageItemCount(int pageIndex) {
		if (pageIndex < 0 || pageIndex >= pageCount()) {
			return -1;
		}
		if (pageIndex == pageCount() - 1) {
			return getTotalItems() % getItemsPerPage();
		} else {
			return getItemsPerPage();
		}
	}

	/**
	 * determines what page an item is on. Zero based indexes this method should
	 * return -1 for itemIndex values that are out of range
	 */
	public int pageIndex(int itemIndex) {
		int counter = 0;
		if (itemIndex < 0 || itemIndex >= getTotalItems()) {
			return -1;
		}
		counter = (itemIndex + 1) / getItemsPerPage();
		if ((itemIndex + 1) % getItemsPerPage() != 0) {
			counter += 1;
		}
		return counter;

	}

}
